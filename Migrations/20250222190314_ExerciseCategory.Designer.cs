// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhasePlayWeb.Data;

#nullable disable

namespace PhasePlayWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250222190314_ExerciseCategory")]
    partial class ExerciseCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.AttributeSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SetID")
                        .HasColumnType("int");

                    b.Property<int>("attributeID")
                        .HasColumnType("int");

                    b.Property<string>("order")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetID");

                    b.HasIndex("attributeID");

                    b.ToTable("AttributeSets");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<string>("RecurrenceRule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Excercises", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryGroup1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryGroup2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YoutubeURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Excercises");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.ExerciseSetAttrib", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ExcerciseID")
                        .HasColumnType("int");

                    b.Property<string>("ExcerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PAExerciseID")
                        .HasColumnType("int");

                    b.Property<int?>("PerWeek")
                        .HasColumnType("int");

                    b.Property<double?>("RM")
                        .HasColumnType("float");

                    b.Property<double?>("RPE")
                        .HasColumnType("float");

                    b.Property<int>("SchemaID")
                        .HasColumnType("int");

                    b.Property<int?>("SupersetID")
                        .HasColumnType("int");

                    b.Property<string>("Velocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("reps")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ExcerciseID");

                    b.HasIndex("PAExerciseID");

                    b.HasIndex("SchemaID");

                    b.ToTable("SetExcercises");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.GroupMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.GroupProgramme", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("programmeId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("GroupProgrammes");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.GroupSession", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("GroupProgrammeID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("EventID");

                    b.HasIndex("GroupProgrammeID");

                    b.ToTable("GroupSession");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.MissedSessions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcerciseID")
                        .HasColumnType("int");

                    b.Property<string>("ExcerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupProgrammeId")
                        .HasColumnType("int");

                    b.Property<int>("PAExerciseID")
                        .HasColumnType("int");

                    b.Property<int?>("PerWeek")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<double?>("RM")
                        .HasColumnType("float");

                    b.Property<double?>("RPE")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemaID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Velocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WeightUsed")
                        .HasColumnType("real");

                    b.Property<int>("reps")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("MissedSessions");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.OvSetExcercises", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ExcerciseID")
                        .HasColumnType("int");

                    b.Property<int>("OverAllSetID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ExcerciseID");

                    b.HasIndex("OverAllSetID");

                    b.ToTable("OvSetExcercises");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.OverAllSet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ProgramID");

                    b.ToTable("OverAllSets");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.PAExercise", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("AddNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("PAExercises");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.PlayerPhysicalTesting", b =>
                {
                    b.Property<decimal?>("AgilityT")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("B_JumpDBL")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("BenchRelative")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("BodyWeightKg")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Bronco")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<decimal?>("DiffLR")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("HeightM")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PullUps")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("RMBench")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("RMSquat")
                        .HasColumnType("decimal(10,3)");

                    b.Property<int?>("RepeatedSprints")
                        .HasColumnType("int");

                    b.Property<decimal?>("SquatRelative")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("TenMSprint")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Test505L")
                        .HasColumnType("decimal(10,3)");

                    b.Property<decimal?>("Test505R")
                        .HasColumnType("decimal(10,3)");

                    b.ToTable("physical_testing", "uwc_mens_15s");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.ProgramAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramID");

                    b.ToTable("ProgramAttributes");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Programme", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OccursOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weeks")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.S_RSchema", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("RM_Increase")
                        .HasColumnType("int");

                    b.Property<double>("RPE_Increase")
                        .HasColumnType("float");

                    b.Property<int>("SetWeek")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("SRSchema");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SchemaAttributes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<double>("PercentRM")
                        .HasColumnType("float");

                    b.Property<double>("RPE")
                        .HasColumnType("float");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("SchemaID")
                        .HasColumnType("int");

                    b.Property<string>("Vel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("SchemaID");

                    b.ToTable("SchemaAttributes");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Session", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcerciseID")
                        .HasColumnType("int");

                    b.Property<string>("ExcerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupProgrammeId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupSessionID")
                        .HasColumnType("int");

                    b.Property<int>("PAExerciseID")
                        .HasColumnType("int");

                    b.Property<int?>("PerWeek")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<double?>("RM")
                        .HasColumnType("float");

                    b.Property<double?>("RPE")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemaID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Velocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WeightUsed")
                        .HasColumnType("real");

                    b.Property<int>("reps")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionDate", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("GroupProgrammeId")
                        .HasColumnType("int");

                    b.Property<int>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("EventID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionDates");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool?>("Completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExcerciseID")
                        .HasColumnType("int");

                    b.Property<string>("ExcerciseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupProgrammeId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupSessionID")
                        .HasColumnType("int");

                    b.Property<int>("PAExerciseID")
                        .HasColumnType("int");

                    b.Property<int?>("PerWeek")
                        .HasColumnType("int");

                    b.Property<int>("ProgramID")
                        .HasColumnType("int");

                    b.Property<double?>("RM")
                        .HasColumnType("float");

                    b.Property<double?>("RPE")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemaID")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Velocity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WeightUsed")
                        .HasColumnType("real");

                    b.Property<int>("reps")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionHistory");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionSet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseSetAttribID")
                        .HasColumnType("int");

                    b.Property<int>("GroupSessionID")
                        .HasColumnType("int");

                    b.Property<int>("PAExerciseID")
                        .HasColumnType("int");

                    b.Property<int?>("PerWeek")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammeID")
                        .HasColumnType("int");

                    b.Property<int>("SetNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ExerciseSetAttribID");

                    b.HasIndex("GroupSessionID");

                    b.HasIndex("PAExerciseID");

                    b.HasIndex("ProgrammeID");

                    b.ToTable("SessionSet");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SetAttributes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ExcercisesId")
                        .HasColumnType("int");

                    b.Property<int>("SetID")
                        .HasColumnType("int");

                    b.Property<int?>("SetNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ExcercisesId");

                    b.HasIndex("SetID");

                    b.ToTable("SetAttributes");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Superset", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PAExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("restperiod")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Supersets");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SupersetExcerciseAttr", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("SupersetID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("SupersetExcerciseAttr");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.TeamMembers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamMembers");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<float?>("BodyWeight")
                        .HasColumnType("real");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("FirstSignIn")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.UserExercises", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserExercises");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.UserSRSchema", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("SetWeek")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("userSRSchemas");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.UserSchemaAttributes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PercentRM")
                        .HasColumnType("int");

                    b.Property<double>("RPE")
                        .HasColumnType("float");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("UserSRSchemaId")
                        .HasColumnType("int");

                    b.Property<int?>("Vel")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("userSchemaAttributes");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupProgrammeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalSessions")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.AttributeSet", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.PAExercise", "Sets")
                        .WithMany()
                        .HasForeignKey("SetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.ProgramAttributes", "ProgramAttributes")
                        .WithMany()
                        .HasForeignKey("attributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgramAttributes");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.ExerciseSetAttrib", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Excercises", "Excercises")
                        .WithMany()
                        .HasForeignKey("ExcerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.PAExercise", "PAExercise")
                        .WithMany()
                        .HasForeignKey("PAExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.S_RSchema", "S_RSchema")
                        .WithMany()
                        .HasForeignKey("SchemaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercises");

                    b.Navigation("PAExercise");

                    b.Navigation("S_RSchema");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.GroupSession", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.GroupProgramme", "GroupProgramme")
                        .WithMany()
                        .HasForeignKey("GroupProgrammeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("GroupProgramme");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Groups", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Teams", "Teams")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.MissedSessions", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.OvSetExcercises", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Excercises", "Excercise")
                        .WithMany()
                        .HasForeignKey("ExcerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.OverAllSet", "OverAllSet")
                        .WithMany()
                        .HasForeignKey("OverAllSetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercise");

                    b.Navigation("OverAllSet");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.OverAllSet", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.ProgramAttributes", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgramID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SchemaAttributes", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.S_RSchema", "S_RSchema")
                        .WithMany()
                        .HasForeignKey("SchemaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("S_RSchema");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Session", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionDate", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionHistory", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SessionSet", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.ExerciseSetAttrib", "ExerciseSetAttrib")
                        .WithMany()
                        .HasForeignKey("ExerciseSetAttribID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.GroupSession", "GroupSession")
                        .WithMany()
                        .HasForeignKey("GroupSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.PAExercise", "PaExercise")
                        .WithMany()
                        .HasForeignKey("PAExerciseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.Programme", "Programme")
                        .WithMany()
                        .HasForeignKey("ProgrammeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseSetAttrib");

                    b.Navigation("GroupSession");

                    b.Navigation("PaExercise");

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.SetAttributes", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.Excercises", "Excercises")
                        .WithMany()
                        .HasForeignKey("ExcercisesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhasePlayWeb.Models.Entities.PAExercise", "Sets")
                        .WithMany()
                        .HasForeignKey("SetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercises");

                    b.Navigation("Sets");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.Teams", b =>
                {
                    b.HasOne("PhasePlayWeb.Models.Entities.User", "User")
                        .WithMany("teams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PhasePlayWeb.Models.Entities.User", b =>
                {
                    b.Navigation("teams");
                });
#pragma warning restore 612, 618
        }
    }
}
