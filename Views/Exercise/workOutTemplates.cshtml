@using PhasePlayWeb.Data;
@using PhasePlayWeb.Models.Entities;
@using Microsoft.EntityFrameworkCore;
@inject PhasePlayWeb.Data.ApplicationDbContext dBContext
@model Tuple<List<PhasePlayWeb.Models.Entities.S_RSchema>, List<PhasePlayWeb.Models.Entities.Excercises>, object>



<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="~/css/stylesheetphaseplay.css" rel="stylesheet" />
    <link href="https://cdn.syncfusion.com/ej2/20.2.36/material.css" rel="stylesheet">
    <script src="https://cdn.syncfusion.com/ej2/20.2.36/dist/ej2.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>
    <style>
        /* Custom scrollbar for schema weeks container */
        .schema-weeks-container::-webkit-scrollbar {
            height: 8px;
        }

        .schema-weeks-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }

        .schema-weeks-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

            .schema-weeks-container::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

        /* Card styling */
        .schema-weeks-container .card {
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

            .schema-weeks-container .card:hover {
                transform: translateY(-5px);
            }

        /* Modal sizing for better display */
        @@media (min-width: 992px) {
            #viewSchemaModal .modal-lg
            {
                max-width: 800px;
            }

        }
    </style>

</head>
<body>
        <div class=" col-md-12 mx-auto" style="margin-top:20px;">
            <button class="btn btn-primary col-md-2" style="margin-top:20px;" data-toggle="modal" data-target="#createWorkoutModal">
                Add Workout
            </button>

            <!-- Create Workout Modal -->
            <div class="modal fade" id="createWorkoutModal" tabindex="-1" role="dialog" aria-labelledby="createWorkoutModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="createWorkoutModalLabel">Create Workout</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <label for="workoutName">Workout Name</label>
                                <input type="text" class="form-control" id="workoutName" name="name" required />
                            </div>
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th class="col-6">Exercise</th>
                                        <th class="col-6">Schema</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>
                                            <select class="form-select col-md-9 exercise-select">
                                                <option>Select Exercise</option>
                                                @if (Model.Item2 != null)
                                                {
                                                    foreach (var exercise in Model.Item2)
                                                    {
                                                        <option value="@exercise.Id">@exercise.Name</option>
                                                    }
                                                }
                                                else
                                                {
                                                    <option>No Exercises Available</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="form-select col-md-9 schema-select" data-schema-target="#schemaTable" name="schemaId">
                                                <option value="">Select Schema</option>
                                                @if (Model.Item1 != null)
                                                {
                                                    @foreach (var schemaGroup in Model.Item1.GroupBy(s => s.name))
                                                    {
                                                        // Check if any schema in this group has attributes
                                                        var hasAttributes = false;
                                                        foreach (var schema in schemaGroup)
                                                        {
                                                            var attributeCount = dBContext.SchemaAttributes
                                                            .Where(a => a.SchemaID == schema.id)
                                                            .Count();
                                                            if (attributeCount > 0)
                                                            {
                                                                hasAttributes = true;
                                                                break;
                                                            }
                                                        }

                                                        if (hasAttributes)
                                                        {
                                                            <option value="@schemaGroup.First().id">@schemaGroup.First().name</option>
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    <option>No Schemas Available</option>
                                                }
                                            </select>
                                            <button type="button" class="btn" style="border-radius:30px;color:#fff" data-toggle="modal" data-target="#viewSchemaModal">
                                                <i class="fas fa-info-circle" aria-hidden="true"></i>
                                            </button>
                                            
                                        </td>
                                    </tr>
                                </tbody>
                            </table>

                            <button type="button" class="btn add-row-btn">
                                <i class="fas fa-plus" aria-hidden="true"></i> Add Exercise
                            </button>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="addWorkoutBtn">Add</button>
                        </div>
                    </div>
                </div>
            </div>

            <!--Table Displaying Workouts-->
            <table id="datatables" class="table border-0">

                <thead class="thead-light">
                    <tr>
                        <th>Name</th>
                        <th>Owner</th>
                        <th>Actions</th>
                    </tr>
                </thead>

                <tbody>
                   
                </tbody>
            </table>
        </div>

        <!-- View Workout Details Modal -->
        <div class="modal fade" id="viewWorkoutModal" tabindex="-1" role="dialog" aria-labelledby="viewWorkoutModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewWorkoutModalLabel">Workout Details</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center py-3" id="workout-loading">
                            <div class="spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <p class="mt-2">Loading workout details...</p>
                        </div>
                        <div id="workout-content" style="display:none;">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <h6>Workout Name: <span id="workout-name" class="font-weight-normal"></span></h6>
                                </div>
                                <div class="col-md-6">
                                    <h6>Type: <span id="workout-type" class="font-weight-normal"></span></h6>
                                </div>
                            </div>
                            <h6 class="mb-3">Exercises:</h6>
                            <div class="table-responsive">
                                <table class="table table-bordered table-hover">
                                    <thead class="thead-light">
                                        <tr>
                                            <th>Exercise</th>
                                            <th>Schema</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="workout-exercises">
                                        <!-- Exercise rows will be added here dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div id="workout-error" class="alert alert-danger" style="display:none;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        
        <!--Modal to view Schema Details-->
        <div class="modal fade" id="viewSchemaModal" tabindex="-1" role="dialog" aria-labelledby="viewSchemaModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                    </div>
                </div>
            </div>
        </div>

    <script>
        $(document).ready(function() {
            // Initialize DataTable with data
            var workoutsTable = $('#datatables').DataTable({
                responsive: true,
                "language": {
                    "lengthMenu": "Show _MENU_ entries",
                    "zeroRecords": "No Workouts found",
                    "info": "Showing page _PAGE_ of _PAGES_",
                    "infoEmpty": "No workouts available",
                    "infoFiltered": "(filtered from _MAX_ total records)"
                },
                data: [
                    @if (Model.Item3 != null)
                    {
                        foreach (var workout in Model.Item3 as dynamic)
                        {
                            <text>
                                                {
                                                    "name": "@workout.Name",
                                                    "owner": "You",
                                                    "actions": ""
                                                },
                            </text>
                        }
                    }
                ],
                columns: [
                    { data: "name" },
                    { data: "owner" },
                    {
                        data: "actions",
                        render: function(data, type, row) {
                            return '<div class="btn-group">' +
                                   '<button class="btn view-workout" data-workout="' + row.name + '"><i class="fas fa-eye"></i></button>' +
                                   '<button class="btn delete-workout" data-workout="' + row.name + '"><i class="fas fa-trash"></i></button>' +
                                   '</div>';
                        }
                    }
                ]
            });

            // Event handlers for the action buttons
            $('#datatables').on('click', '.view-workout', function() {
                var workoutName = $(this).data('workout');
                // Add your view logic here
                console.log('View workout: ' + workoutName);
            });

            $('#datatables').on('click', '.delete-workout', function() {
                var workoutName = $(this).data('workout');
                if (confirm('Are you sure you want to delete workout: ' + workoutName + '?')) {
                    // Add your delete logic here
                    $.ajax({
                        url: '/Exercise/DeleteWorkout',
                        type: 'POST',
                        data: { name: workoutName },
                        success: function(response) {
                            if (response.success) {
                                workoutsTable.row($(this).parents('tr')).remove().draw();
                                alert('Workout deleted successfully');
                            } else {
                                alert('Error: ' + response.message);
                            }
                        },
                        error: function() {
                            alert('An error occurred while deleting the workout');
                        }
                    });
                }
            });
        });
    </script>

    <script>
        function addRow(button) {
            // Find the table and tbody
            const table = $(button).closest('.modal-body').find('.table');
            const tbody = table.find('tbody');

            // Create a unique ID for this row's schema table
            const rowId = 'row' + Date.now();
            const schemaTableId = 'schemaTable_' + rowId;

            // Create a new row with exercise-select and schema-select
            const newRow = `
                <tr id="${rowId}" class="exercise-row">
                    <td>
                        <select class="form-select col-md-9 exercise-select">
                            <option>Select Exercise</option>
                            @if (Model.Item2 != null)
                            {
                                foreach (var exercise in Model.Item2)
                                {
                                           <option value="@exercise.Id">@exercise.Name</option>
                                }
                            }
                            else
                            {
                                 <option>No Exercises Available</option>
                            }
                        </select>
                    </td>
                    <td>
                        <select class="form-select col-md-9 schema-select" data-schema-target="#${schemaTableId}">
                            <option>Select Schema</option>
                            @if (Model.Item1 != null)
                            {
                                @foreach (var schemaGroup in Model.Item1.GroupBy(s => s.name))
                                {
                                   <option value="@schemaGroup.First().id">@schemaGroup.First().name</option>
                                }
                            }
                            else
                            {
                                <option>No Schemas Available</option>
                            }
                        </select>
                        <button type="button" class="btn" style="border-radius:30px;color:#fff" data-toggle="modal" data-target="#viewSchemaModal">
                            <i class="fas fa-info-circle" aria-hidden="true"></i>
                        </button>
                    </td>
                </tr>
            `;

            //Add the new rows to the table
            //If there's a main schema row, add before it, otherwise append to tbody
            const mainSchemaRow = tbody.find('#schemaTable');
            if (mainSchemaRow.length > 0) {
                mainSchemaRow.before(newRow);
            } else {
                tbody.append(newRow);
            }

            //Initialize event handler for the new schema-select
            $(`#${rowId} .schema-select`).on('change', function() {
                const selectedSchema = $(this).val();
                const targetId = $(this).data('schema-target');

                if (selectedSchema && selectedSchema !== 'Select Schema' && selectedSchema !== 'Select Exercise') {
                    $(targetId).collapse('show');
                } else {
                    $(targetId).collapse('hide');
                }
            });
        }

        // Add row button click handler
        $(document).on('click', '.add-row-btn', function() {
            addRow(this);
        });
    </script>
    <script>
        // Add this to your document.ready function
        $("#addWorkoutBtn").click(function() {
            const workoutName = $("#workoutName").val();
            const workoutType = $("#type").val();
            const exerciseIds = [];
            const schemaIds = [];

            // Validate workout name
            if (!workoutName) {
                alert("Please enter a workout name");
                return;
            }

            // Get all exercise rows
            $(".table tbody tr").each(function() {
                const exerciseSelect = $(this).find(".exercise-select");
                const schemaSelect = $(this).find(".schema-select");

                const exerciseId = exerciseSelect.val();
                const schemaId = schemaSelect.val();

                // Only add valid selections
                if (exerciseId && exerciseId !== "Select Exercise" &&
                    schemaId && schemaId !== "Select Schema") {
                    exerciseIds.push(exerciseId);
                    schemaIds.push(schemaId);
                }
            });

            // Validate we have at least one exercise-schema pair
            if (exerciseIds.length === 0) {
                alert("Please add at least one exercise with a schema");
                return;
            }

            // Create form data
            const formData = new FormData();
            formData.append("name", workoutName);
            formData.append("type", workoutType);

            // Add multiple values
            exerciseIds.forEach(id => formData.append("exerciseIds", id));
            schemaIds.forEach(id => formData.append("schemaIds", id));

            // Send AJAX request
            $.ajax({
                url: '/Exercise/saveWorkout',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        // Close the modal
                        $("#createWorkoutModal").modal('hide');
                        // Reload the page to show the new workout
                        location.reload();
                    } else {
                        alert("Error: " + response.message);
                    }
                },
                error: function() {
                    alert("An error occurred while saving the workout");
                }
            });
        });

    </script>
    <script>
        // Add this to your existing script section at the bottom of the file
        $(document).ready(function() {
            // Event listener for schema info button
            $(document).on('click', '[data-target="#viewSchemaModal"]', function() {
                // Get the associated schema select element
                const schemaSelect = $(this).prev('.schema-select');
                const schemaId = schemaSelect.val();
                const schemaName = schemaSelect.find('option:selected').text();

                // Only proceed if a schema is selected
                if (schemaId && schemaId !== '' && schemaName !== 'Select Schema') {
                    // Set the schema name in the modal header
                    $('#viewSchemaModal .modal-header').html(`
                        <h5 class="modal-title">${schemaName}</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    `);

                    // Show loading message in modal body
                    $('#viewSchemaModal .modal-body').html('<p class="text-center">Loading schema details...</p>');

                    // Fetch and display schema details
                    fetchSchemaDetails(schemaId);
                } else {
                    // If no schema selected, show error message
                    $('#viewSchemaModal .modal-header').html(`
                        <h5 class="modal-title">Schema Details</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    `);
                    $('#viewSchemaModal .modal-body').html('<p class="text-danger">Please select a schema first.</p>');
                }

                // Reset modal size when modal is hidden
                $('#viewSchemaModal').on('hidden.bs.modal', function() {
                    $('#viewSchemaModal .modal-dialog').removeClass('modal-lg');
                });
            });

            // Function to fetch schema details
            function fetchSchemaDetails(schemaId) {
                $.ajax({
                    url: '/Exercise/GetSchemaDetails',
                    type: 'GET',
                    data: { id: schemaId },
                    success: function(response) {
                        if (response && response.length > 0) {
                            let modalContent = '';

                            // Add schema information header
                            modalContent += `<div class="mb-3">
                                <h6 class="text-muted">Total weeks: ${response.length}</h6>
                            </div>`;

                            // Create horizontally scrollable container for week cards
                            modalContent += `<div class="schema-weeks-container" style="overflow-x: auto; white-space: nowrap; padding-bottom: 10px;">
                                <div class="d-flex">`;

                            // Create cards for each week
                            response.forEach((weekData, index) => {
                                modalContent += `
                                    <div class="card mr-3" style="min-width: 300px; display: inline-block; vertical-align: top;">
                                        <div class="card-header bg-primary text-white">
                                            <h6 class="mb-0">Week ${weekData.weekNumber}</h6>
                                        </div>
                                        <div class="card-body" style="max-height: 350px; overflow-y: auto;">
                                            ${createSchemaTable(weekData.attributes)}
                                        </div>
                                    </div>`;
                            });

                            modalContent += `</div></div>`;

                            // Display instructions for mobile users
                            if (response.length > 1) {
                                modalContent += `<div class="text-muted mt-2 small">
                                    <i class="fas fa-arrows-alt-h mr-1"></i> Scroll horizontally to see all weeks
                                </div>`;
                            }

                            // Update modal body with schema details
                            $('#viewSchemaModal .modal-body').html(modalContent);

                            // Make modal wider for better display of cards
                            $('#viewSchemaModal .modal-dialog').addClass('modal-lg');
                        } else {
                            // Handle empty response
                            $('#viewSchemaModal .modal-body').html('<p>No details available for this schema.</p>');
                        }
                    },
                    error: function() {
                        // Handle error
                        $('#viewSchemaModal .modal-body').html('<p class="text-danger">Error loading schema details. Please try again.</p>');
                    }
                });

                // Helper function to create a schema table from attributes
                function createSchemaTable(attributes) {
                    if (!attributes || attributes.length === 0) {
                        return '<p>No sets defined for this week.</p>';
                    }

                    let tableHtml = `
                        <table class="table table-bordered table-sm">
                            <thead class="thead-light">
                                <tr>
                                    <th>Set</th>
                                    <th>Reps</th>
                                    <th>%RM</th>
                                    <th>RPE</th>
                                    <th>Velocity</th>
                                </tr>
                            </thead>
                            <tbody>`;

                    // Add rows for each set in the schema
                    attributes.forEach((item, index) => {
                        tableHtml += `
                            <tr>
                                <td>${index + 1}</td>
                                <td>${item.reps || '-'}</td>
                                <td>${item.percentRM || '-'}</td>
                                <td>${item.rpe || '-'}</td>
                                <td>${item.vel || '-'}</td>
                            </tr>`;
                    });

                    tableHtml += `
                            </tbody>
                        </table>`;

                    return tableHtml;
                }
            }
        });
    </script>
    <script>
                // Event handlers for the action buttons
        $('#datatables').on('click', '.view-workout', function() {
            var workoutName = $(this).data('workout');

            // Reset modal state
            $('#workout-loading').show();
            $('#workout-content').hide();
            $('#workout-error').hide();

            // Set modal title
            $('#viewWorkoutModalLabel').text('Workout: ' + workoutName);

            // Show the modal
            $('#viewWorkoutModal').modal('show');

            // Fetch workout details
            $.ajax({
                url: '/Exercise/GetWorkoutDetails',
                type: 'GET',
                data: { name: workoutName },
                success: function(response) {
                    $('#workout-loading').hide();

                    if (response.success) {
                        // Fill in workout details
                        $('#workout-name').text(response.name);
                        // $('#workout-type').text(response.type || 'Not specified');

                        // Clear existing rows
                        $('#workout-exercises').empty();

                        // Add exercise rows
                        if (response.exercises && response.exercises.length > 0) {
                            response.exercises.forEach(function(exercise) {
                                $('#workout-exercises').append(`
                                    <tr>
                                        <td>${exercise.exerciseName}</td>
                                        <td>${exercise.schemaName}</td>
                                        <td>
                                            <button class="btn btn-sm view-schema" data-schema-id="${exercise.schemaId}" data-toggle="modal" data-target="#viewSchemaModal">
                                                <i class="fas fa-info-circle"></i> View Schema
                                            </button>
                                        </td>
                                    </tr>
                                `);
                            });

                            $('#workout-content').show();
                        } else {
                            $('#workout-error').text('No exercises found for this workout.').show();
                        }
                    } else {
                        $('#workout-error').text(response.message || 'Failed to load workout details.').show();
                    }
                },
                error: function() {
                    $('#workout-loading').hide();
                    $('#workout-error').text('An error occurred while fetching workout details. Please try again.').show();
                }
            });
        });

                // Handler for viewing schema details from the workout modal
        $(document).on('click', '.view-schema', function(e) {
            // Prevent default behavior to handle it manually
            e.preventDefault();

            var schemaId = $(this).data('schema-id');
            console.log("Schema ID:", schemaId); // For debugging

            // Hide workout modal
            $('#viewWorkoutModal').modal('hide');

            // Set the schema modal header (temporary until we get the name)
            $('#viewSchemaModal .modal-header').html(`
                <h5 class="modal-title">Schema Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            `);

            // Show loading message
            $('#viewSchemaModal .modal-body').html('<p class="text-center"><i class="fas fa-spinner fa-spin"></i> Loading schema details...</p>');

            // Show the schema modal
            $('#viewSchemaModal').modal('show');

            // Call the fetchSchemaDetails function directly
            $.ajax({
                url: '/Exercise/GetSchemaDetails',
                type: 'GET',
                data: { id: schemaId },
                success: function(response) {
                    if (response && response.length > 0) {
                        let modalContent = '';

                        // Update the title with the schema name
                        $('#viewSchemaModal .modal-header').html(`
                            <h5 class="modal-title">${response[0].schemaName}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        `);

                        // Add schema information header
                        modalContent += `<div class="mb-3">
                            <h6 class="text-muted">Total weeks: ${response.length}</h6>
                        </div>`;

                        // Create horizontally scrollable container for week cards
                        modalContent += `<div class="schema-weeks-container" style="overflow-x: auto; white-space: nowrap; padding-bottom: 10px;">
                            <div class="d-flex">`;

                        // Create cards for each week
                        response.forEach((weekData, index) => {
                            modalContent += `
                                <div class="card mr-3" style="min-width: 300px; display: inline-block; vertical-align: top;">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0">Week ${weekData.weekNumber}</h6>
                                    </div>
                                    <div class="card-body" style="max-height: 350px; overflow-y: auto;">
                                        ${createSchemaTable(weekData.attributes)}
                                    </div>
                                </div>`;
                        });

                        modalContent += `</div></div>`;

                        // Display instructions for mobile users
                        if (response.length > 1) {
                            modalContent += `<div class="text-muted mt-2 small">
                                <i class="fas fa-arrows-alt-h mr-1"></i> Scroll horizontally to see all weeks
                            </div>`;
                        }

                        // Update modal body with schema details
                        $('#viewSchemaModal .modal-body').html(modalContent);

                        // Make modal wider for better display of cards
                        $('#viewSchemaModal .modal-dialog').addClass('modal-lg');
                    } else {
                        // Handle empty response
                        $('#viewSchemaModal .modal-body').html('<p>No details available for this schema.</p>');
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error fetching schema details:", error);
                    // Handle error
                    $('#viewSchemaModal .modal-body').html('<p class="text-danger">Error loading schema details. Please try again.</p>');
                }
            });

            // When schema modal is closed, show workout modal again
            $('#viewSchemaModal').on('hidden.bs.modal', function() {
                $('#viewWorkoutModal').modal('show');
                $('#viewSchemaModal').off('hidden.bs.modal'); // Remove the event handler
            });

            // Helper function to create a schema table from attributes
            function createSchemaTable(attributes) {
                if (!attributes || attributes.length === 0) {
                    return '<p>No sets defined for this week.</p>';
                }

                let tableHtml = `
                    <table class="table table-bordered table-sm">
                        <thead class="thead-light">
                            <tr>
                                <th>Set</th>
                                <th>Reps</th>
                                <th>%RM</th>
                                <th>RPE</th>
                                <th>Velocity</th>
                            </tr>
                        </thead>
                        <tbody>`;

                            // Add rows for each set in the schema
                            attributes.forEach((item, index) => {
                                tableHtml += `
                                    <tr>
                                        <td>${index + 1}</td>
                                        <td>${item.reps || '-'}</td>
                                        <td>${item.percentRM || '-'}</td>
                                        <td>${item.rpe || '-'}</td>
                                        <td>${item.vel || '-'}</td>
                                    </tr>`;
                            });

                            tableHtml += `
                        </tbody>
                    </table>`;

                return tableHtml;
            }
        });
    </script>
</body>
</html>
